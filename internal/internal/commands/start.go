package commands

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/gonozov0/weddingbot/pkg/logger"
)

const (
	photoFileID    = "AgACAgIAAxkBAAOBZbOw1UdDCWJZLJqd-djGgHgqaIoAAvn1MRvzbZhJrgHQueo7tmkBAAMCAAN5AAM0BA"
	invitationText = `
*–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –°–≤–∞–¥—å–±—É!*

–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è,

–ú—ã, _–î–∏–º–∞ –∏ –û–ª—è –ì–æ–Ω–æ–∑–æ–≤—ã_, —Ä–∞–¥—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ –ø–æ —Å–ª—É—á–∞—é –Ω–∞—à–µ–≥–æ –±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è!

üìÖ *–î–∞—Ç–∞:* 24 –∏—é–ª—è 2024 –≥–æ–¥–∞
üìç *–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:* –†–µ—Å—Ç–æ—Ä–∞–Ω "–†–æ–º–∞–Ω—Ç–∏–∫", –≥. –ú–æ—Å–∫–≤–∞

–í–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –¥–ª—è –Ω–∞—Å –ª—É—á—à–∏–º –ø–æ–¥–∞—Ä–∫–æ–º!

–° –ª—é–±–æ–≤—å—é,
*–î–∏–º–∞ –∏ –û–ª—è*
`
)

type StartDTO struct {
	ChatID int64
	Login  string
}

func Start(bot *tgbotapi.BotAPI, dto StartDTO) *logger.SlogError {
	if dto.Login == "" {
		return requestPhoneNumber(bot, dto.ChatID)
	}

	if !isLoginInvited(dto.Login) {
		return sendNotInvitedInfo(bot, dto.ChatID)
	}

	return sendInvitation(bot, dto.ChatID)
}

func requestPhoneNumber(bot *tgbotapi.BotAPI, chatID int64) *logger.SlogError {
	msg := tgbotapi.NewMessage(
		chatID,
		"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –≤—ã –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Å—Ç–µ–π.",
	)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä –±–æ—Ç—É –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		return logger.NewSlogError(err, "error sending message")
	}

	return nil
}

var loginWhitelist = []string{
	"gonozov0",
	"TaoGen",
	"+7 915 979 6484",
}

func isLoginInvited(login string) bool {
	for _, whitelistedLogin := range loginWhitelist {
		if login == whitelistedLogin {
			return true
		}
	}
	return false
}

func sendNotInvitedInfo(bot *tgbotapi.BotAPI, chatID int64) *logger.SlogError {
	msg := tgbotapi.NewMessage(
		chatID,
		"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.",
	)
	if _, err := bot.Send(msg); err != nil {
		return logger.NewSlogError(err, "error sending message")
	}

	contact := tgbotapi.NewContact(chatID, "+79807442720", "–û–ª—è")
	contact.ReplyMarkup = getFinishReplyKeyboard()
	if _, err := bot.Send(contact); err != nil {
		return logger.NewSlogError(err, "error sending contact")
	}

	return nil
}

func sendInvitation(bot *tgbotapi.BotAPI, chatID int64) *logger.SlogError {
	photoGroup := tgbotapi.NewPhoto(chatID, tgbotapi.FileID(photoFileID))
	if _, err := bot.Send(photoGroup); err != nil {
		return logger.NewSlogError(err, "error sending photo")
	}

	newMsg := tgbotapi.NewMessage(chatID, invitationText)
	newMsg.ParseMode = "Markdown"
	newMsg.ReplyMarkup = getStartReplyKeyboard()
	if _, err := bot.Send(newMsg); err != nil {
		return logger.NewSlogError(err, "error sending message")
	}

	return nil
}

func getStartReplyKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(AcceptCommand),
			tgbotapi.NewKeyboardButton(DeclineCommand),
		),
	)
}
